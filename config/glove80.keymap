
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed by system behaviors/macros */
#include <dt-bindings/zmk/outputs.h>

/* Include behaviour includes needed by key binds - automatically generated */
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>


/ {
    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
    };

    macros {
        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
    };

    macros {
        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
    };

    macros {
        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };

    /* Custom Defined Behaviors */

    // &dot_override,
    morph_dot: morph_dot {
        compatible = "zmk,behavior-mod-morph";
        label = "MORPH_DOT";
        #binding-cells = <0>;
        bindings = <&kp PERIOD>, <&kp COLON>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    // &comma_override,
    morph_comma: morph_comma {
        compatible = "zmk,behavior-mod-morph";
        label = "MORPH_COMMA";
        #binding-cells = <0>;
        bindings = <&kp COMMA>, <&kp SEMICOLON>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    // &parens_left_override,
    morph_parens_left: morph_parens_left {
        compatible = "zmk,behavior-mod-morph";
        label = "MORPH_PARENS_LEFT";
        #binding-cells = <0>;
        bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    // &parens_right_override,
    morph_parens_right: morph_parens_right {
        compatible = "zmk,behavior-mod-morph";
        label = "MORPH_PARENS_RIGHT";
        #binding-cells = <0>;
        bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    // &exclamation_override,
    morph_exclamation: morph_exclamation {
        compatible = "zmk,behavior-mod-morph";
        label = "MORPH_EXCLAMATION";
        #binding-cells = <0>;
        bindings = <&kp BACKSLASH>, <&kp EXCLAMATION>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    // &quote_single_override,
    morph_quote_single: morph_quote_single {
        compatible = "zmk,behavior-mod-morph";
        label = "MORPH_QUOTE_SINGLE";
        #binding-cells = <0>;
        bindings = <&kp SINGLE_QUOTE>, <&kp GRAVE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    // &quote_double_override,
    morph_quote_double: morph_quote_double {
        compatible = "zmk,behavior-mod-morph";
        label = "MORPH_QUOTE_DOUBLE";
        #binding-cells = <0>;
        bindings = <&kp DOUBLE_QUOTES>, <&kp TILDE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };


    /* Automatically generated keymap */
    keymap {
        compatible = "zmk,keymap";

default_layer {
bindings = <
&kp F1              &kp F2                  &kp F3                  &kp F4          &kp F5                                                                                                                                                                         &kp F6     &kp F7    &kp F8                 &kp F9                  &kp F10
&kp LS(LG(S))       &morph_quote_single     &morph_quote_double     &kp MINUS       &kp EQUAL   &kp SLASH                                                                                                                               &morph_exclamation         &kp LBKT   &kp RBKT  &morph_parens_left     &morph_parens_right     &kp MINUS
&kp LC(LA(DEL))     &kp V                   &kp W                   &kp D           &kp L       &mo_key LAYER_CMD Q                                                                                                                     &kp Z                      &kp U      &kp O     &kp Y                  &kp B                   &none
&kp ESC             &kp N                   &kp S                   &kp T           &kp R       &morph_comma                                                                                                                            &morph_dot                 &kp A      &kp E     &kp I                  &kp C                   &kp ENTER
&none               &kp P                   &kp F                   &kp M           &kp H       &kp SEMICOLON             &mo 6     &kp LEFT_WIN    &kp LEFT_CONTROL                 &kp ESCAPE      &kp TAB            &mo 6           &kp COLON                  &kp K      &kp J     &kp X                  &kp G                   &none
&none               &kp HOME                &kp PAGE_DOWN           &kp PAGE_UP     &kp END                               &kp BSPC  &kp LEFT_SHIFT  &kp LEFT_ALT                     &mo LAYER_CMD   &kp RIGHT_SHIFT    &kp SPACE                                  &kp LEFT   &kp DOWN  &kp UP                 &kp RIGHT               &none
>;
};
layer_qwerty {
bindings = <
&kp F1      &kp F2      &kp F3      &kp F4      &kp F5                                                                                              &kp F6  &kp F7      &kp F8      &kp F9      &kp F10
&kp EQUAL   &kp N1      &kp N2      &kp N3      &kp N4      &kp N5                                                                          &kp N6  &kp N7  &kp N8      &kp N9      &kp N0      &kp MINUS
&kp TAB     &kp Q       &kp W       &kp E       &kp R       &kp T                                                                           &kp Y   &kp U   &kp I       &kp O       &kp P       &kp BSLH
&kp ESC     &kp A       &kp S       &kp D       &kp F       &kp G                                                                           &kp H   &kp J   &kp K       &kp L       &kp SEMI    &kp SQT
&kp GRAVE   &kp Z       &kp X       &kp C       &kp V       &kp B   &kp LSHFT   &kp LCTRL   &lower      &kp LGUI    &kp RCTRL   &kp RSHFT   &kp N   &kp M   &kp COMMA   &kp DOT     &kp FSLH    &kp PG_UP
&magic 2 0  &kp HOME    &kp END     &kp LEFT    &kp RIGHT           &kp BSPC    &kp DEL     &kp LALT    &kp RALT    &kp RET     &kp SPACE           &kp UP  &kp DOWN    &kp LBKT    &kp RBKT    &kp PG_DN
>;
};


layer_padding1 {
bindings = <
&trans  &trans  &trans  &trans  &trans                                                                                           &trans  &trans  &trans  &trans   &trans
&trans  &trans  &trans  &trans  &trans   &kp N5                                                                          &kp N6  &trans  &trans  &trans  &trans   &trans
&trans  &trans  &trans  &trans  &trans   &kp T                                                                           &kp Y   &trans  &trans  &trans  &trans   &trans
&trans  &trans  &trans  &trans  &trans   &kp G                                                                           &kp H   &trans  &trans  &trans  &trans   &trans
&trans  &trans  &trans  &trans  &trans   &kp B   &kp LSHFT   &kp LCTRL   &lower      &kp LGUI    &kp RCTRL   &kp RSHFT   &kp N   &trans  &trans  &trans  &trans   &trans
&trans  &trans  &trans  &trans  &trans           &kp BSPC    &kp DEL     &kp LALT    &kp RALT    &kp RET     &kp SPACE           &trans  &trans  &trans  &trans   &trans
>;
};



        layer_Lower {
            bindings = <
 &kp C_BRI_DN  &kp C_BRI_UP      &kp C_PREV      &kp C_NEXT         &kp C_PP                                                                                    &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP            &none  &kp PAUSE_BREAK
       &trans         &none           &none           &none            &none   &kp HOME                                                   &kp LEFT_PARENTHESIS  &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY  &kp PRINTSCREEN
       &trans         &none           &none    &kp UP_ARROW            &none    &kp END                                                  &kp RIGHT_PARENTHESIS   &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_MINUS   &kp SCROLLLOCK
       &trans         &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PG_UP                                                            &kp PERCENT   &kp KP_N4     &kp KP_N5     &kp KP_N6      &kp KP_PLUS            &none
       &trans     &kp K_APP           &none         &kp F11          &kp F12  &kp PG_DN  &trans  &trans   &to 0  &trans  &trans  &trans              &kp COMMA   &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_ENTER           &trans
   &magic 2 0      &kp CAPS         &kp INS         &kp F11          &kp F12             &trans  &trans  &trans  &trans  &trans  &trans                          &kp KP_N0     &kp KP_N0    &kp KP_DOT     &kp KP_ENTER           &trans
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
      &trans  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
      &reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none          &reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

    };
};
